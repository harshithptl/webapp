name: Deploy App

on:
  push:
    branches: [ "main" ]

jobs:
  unit-tests:
    name: Run Unit Tests on PR
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'maven'

      - name: Start PostgreSQL
        run: |
          sudo sed -i "s/local   all             all             peer/local   all             all             md5/" /etc/postgresql/*/main/pg_hba.conf
          sudo sed -i "s/host    all             all             127.0.0.1\/32            trust/host    all             all             127.0.0.1\/32            md5/" /etc/postgresql/*/main/pg_hba.conf
          sudo sed -i "s/host    all             all             ::1\/128                 trust/host    all             all             ::1\/128                 md5/" /etc/postgresql/*/main/pg_hba.conf
          sudo systemctl restart postgresql
          sudo systemctl start postgresql
          sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$POSTGRES_DB'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE \"$POSTGRES_DB\";"
          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$POSTGRES_USER'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER \"$POSTGRES_USER\" WITH LOGIN PASSWORD '$POSTGRES_PASSWORD';"
          sudo -u postgres psql -c "ALTER DATABASE $POSTGRES_DB OWNER TO $POSTGRES_USER;"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"$POSTGRES_DB\" TO \"$POSTGRES_USER\";"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH LOGIN;"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH CREATEDB;"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH CREATEROLE;"

      - name: Install Dependencies
        run: mvn clean install -DskipTests

      - name: Run Unit Tests
        run: mvn test -Daws.region=${{ secrets.AWS_DEFAULT_REGION }}
        env:
          SPRING_APPLICATION_JSON: |
            {
              "spring.datasource.url": "jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}",
              "spring.datasource.username": "${{ secrets.POSTGRES_USER }}",
              "spring.datasource.password": "${{ secrets.POSTGRES_PASSWORD}}",
              "spring.datasource.driver-class-name": "org.postgresql.Driver",
              "spring.jpa.hibernate.ddl-auto": "update",
              "app.s3.bucket.name": "dummy-bucket"
            }

  build-and-deploy:
    name: Build and Deploy Artifacts and Images
    runs-on: ubuntu-latest
    needs: [unit-tests]
    outputs:
      ami_id: ${{ steps.build_ami.outputs.ami_id }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Zip up repo
        run: |
          zip -r webapp.zip . -x './.git/*' -x '*/.git/*'

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://releases.hashicorp.com/packer/1.9.1/packer_1.9.1_linux_amd64.zip
          unzip packer_1.9.1_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer version

      - name: Initialize Packer Template
        run: packer init ./src/main/scripts/generateAmi.pkr.hcl

      - name: Validate Packer Template
        run: |
          packer validate \
            -var 'webapp_zip_path=./webapp.zip' \
            src/main/scripts/generateAmi.pkr.hcl

      - name: Build AWS Images (AMI Build in DEV)
        id: build_ami
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          packer build -var 'webapp_zip_path=./webapp.zip' src/main/scripts/generateAmi.pkr.hcl | tee packer_build_output.txt
          # Parse for an AMI ID; adjust the grep regex if needed
          AMI_ID=$(grep -o "ami-[0-9a-fA-F]*" packer_build_output.txt | head -n 1)
          echo "AMI_ID: $AMI_ID"
          if [ -z "$AMI_ID" ]; then
            echo "No AMI ID found, exiting."
            exit 1
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

  post-deploy:
    name: Post-deploy Operations (DEMO)
    runs-on: ubuntu-latest
    needs: [ build-and-deploy ]
    steps:
      - name: Configure AWS CLI for DEMO Account
        run: |
          aws configure set aws_access_key_id ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Ensure jq is installed
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is already installed"
          fi

      - name: Update Launch Template with New AMI (Preserving All Config)
        id: new_lt
        env:
          LT_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
          REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AMI_ID: ${{ needs.build-and-deploy.outputs.ami_id }}
        run: |
          echo "Fetching latest launch template version..."
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-ids "$LT_ID" \
            --region "$REGION" \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)

          echo "Downloading launch template config for version $LATEST_VERSION..."
          aws ec2 describe-launch-template-versions \
            --launch-template-id "$LT_ID" \
            --versions "$LATEST_VERSION" \
            --region "$REGION" \
            --query 'LaunchTemplateVersions[0].LaunchTemplateData' \
            --output json > base.json

          echo "Replacing ImageId with $AMI_ID in the launch template config..."
          jq --arg AMI "$AMI_ID" '.ImageId = $AMI' base.json > new-data.json

          echo "Creating new launch template version with updated AMI..."
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LT_ID" \
            --launch-template-data file://new-data.json \
            --region "$REGION" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "New Launch Template Version: $NEW_VERSION"
          echo "lt_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Auto Scaling Group
        env:
          ASG_NAME: csye6225-app-asg
        run: |
          # Use LaunchTemplateId (not LaunchTemplateName) and the version we just created:
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ steps.new_lt.outputs.lt_version }}"

      - name: Start Instance Refresh
        id: instance_refresh
        env:
          ASG_NAME: csye6225-app-asg
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences "MinHealthyPercentage=100,InstanceWarmup=120" \
            > refresh_output.json
          REFRESH_ID=$(jq -r '.InstanceRefreshId' refresh_output.json)
          echo "Instance Refresh ID: $REFRESH_ID"
          echo "::set-output name=refresh_id::$REFRESH_ID"

      - name: Wait for Instance Refresh Completion
        env:
          ASG_NAME: csye6225-app-asg
          REFRESH_ID: ${{ steps.instance_refresh.outputs.refresh_id }}
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Waiting for Instance Refresh to complete..."
            sleep 30
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query "InstanceRefreshes[?InstanceRefreshId=='${REFRESH_ID}'].Status" --output text)
            echo "Current Instance Refresh Status: $STATUS"
          done
          if [ "$STATUS" != "Successful" ]; then
            echo "ERROR: Instance Refresh failed with status $STATUS"
            exit 1
          fi
          echo "Instance Refresh completed successfully."

      - name: Post-deploy Cleanup
        run: echo "Deployment and Instance Refresh complete."
