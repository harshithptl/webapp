name: Deploy App

on:
  push:
    branches: [ "main" ]

jobs:
  unit-tests:
    name: Run Unit Tests on PR
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'maven'

      - name: Start PostgreSQL
        run: |
          sudo sed -i "s/local   all             all             peer/local   all             all             md5/" /etc/postgresql/*/main/pg_hba.conf
          sudo sed -i "s/host    all             all             127.0.0.1\/32            trust/host    all             all             127.0.0.1\/32            md5/" /etc/postgresql/*/main/pg_hba.conf
          sudo sed -i "s/host    all             all             ::1\/128                 trust/host    all             all             ::1\/128                 md5/" /etc/postgresql/*/main/pg_hba.conf

          sudo systemctl restart postgresql

          sudo systemctl start postgresql
          sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$POSTGRES_DB'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE \"$POSTGRES_DB\";"
          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$POSTGRES_USER'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER \"$POSTGRES_USER\" WITH LOGIN PASSWORD '$POSTGRES_PASSWORD';"
          sudo -u postgres psql -c "ALTER DATABASE $POSTGRES_DB OWNER TO $POSTGRES_USER;"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"$POSTGRES_DB\" TO \"$POSTGRES_USER\";"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH LOGIN;"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH CREATEDB;"
          sudo -u postgres psql -c "ALTER ROLE $POSTGRES_USER WITH CREATEROLE;"

      - name: Install Dependencies
        run: mvn clean install -DskipTests

      - name: Run Unit Tests
        run: mvn test
        env:
          SPRING_APPLICATION_JSON: |
            {
              "spring.datasource.url": "jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}",
              "spring.datasource.username": "${{ secrets.POSTGRES_USER }}",
              "spring.datasource.password": "${{ secrets.POSTGRES_PASSWORD}}",
              "spring.datasource.driver-class-name": "org.postgresql.Driver",
              "spring.jpa.hibernate.ddl-auto": "update"
            }

  build-and-deploy:
    name: Build and Deploy Artifacts and Images
    runs-on: ubuntu-latest

    needs: [unit-tests]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Zip up repo
        run: |
          zip -r webapp.zip . -x './.git/*' -x '*/.git/*'

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://releases.hashicorp.com/packer/1.9.1/packer_1.9.1_linux_amd64.zip
          unzip packer_1.9.1_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer version

      - name: Initialize Packer Template
        run: packer init ./src/main/scripts/generateAmi.pkr.hcl

      - name: Create GCP DEV Service Account Key JSON
        id: gcp-dev
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "gcp_dev_key.json"
          json: ${{ secrets.GCP_DEV_SERVICE_ACCOUNT_KEY }}

      - name: Create GCP DEMO Service Account Key JSON
        id: gcp-demo
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "gcp_demo_key.json"
          json: ${{ secrets.GCP_DEMO_SERVICE_ACCOUNT_KEY }}

      - name: Validate Packer Template
        run: |
          packer validate \
            -var 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' \
            -var 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' \
            -var 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' \
            -var 'webapp_zip_path=./webapp.zip' \
            -var "gcp_service_account_key_file_dev=$(pwd)/gcp_dev_key.json" \
            -var "gcp_service_account_key_file_demo=$(pwd)/gcp_demo_key.json" \
            src/main/scripts/generateAmi.pkr.hcl

      - name: Build AWS & GCP images
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          packer build \
            -var 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' \
            -var 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' \
            -var 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' \
            -var 'webapp_zip_path=./webapp.zip' \
            -var "gcp_service_account_key_file_dev=$(pwd)/gcp_dev_key.json" \
            -var "gcp_service_account_key_file_demo=$(pwd)/gcp_demo_key.json" \
            src/main/scripts/generateAmi.pkr.hcl
